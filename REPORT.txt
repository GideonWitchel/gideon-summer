Why doesn't the starter code compile? How did you fix it?

    There is an issue with include guards, because Products are being defined twice. This is fixed by adding "#pragma once" to the top of product.h

What are the average and worst case time complexities for each map operation?

    O(1); O(length) in the worst case

How many collisions are you getting with your chained implementaion?

    In a 3000 word test:
    For Names:
    4096 Lists
    Total Collisions: 839
    Mean Collisions: 0.204834
    Stdev Collisions: 0.508987
    For Products:
    4096 Lists
    Total Collisions: 953
    Mean Collisions: 0.232666
    Stdev Collisions: 0.422533

How long was the longest list of collisions?

    In the 3000 word test, the longest length was 5 for names and 2 for products (the shortest was 0 for both).

Describe exactly what you measured and how; consider making a new test case with more insertions.

    I measured total elements, mean elements, stdev elements, total collisions, mean collisions, stdev collisions, number of lists, number of lists with zero elements, number with 1 element, number with more than 1 element, the size of the biggest list, and the size of the smallest list.
    These are all in the display() function.

How can you reduce the number of collisions?

    Expand the hashtable or change the hashing function. I will opt for expanding the hashtable if the load factor reached 0.75.

Is there any code between your two implementations of stdmap.h and chained.h that can be reused or refactored?

    The hash functions cannot be reused.
    The get function can be reused except for its default return value, which is -1 for StringToIntMap and nullptr for IntToProductMap
    The put function can be reused except the argument names are different and the std::pair types are different ( <std::string, uint32_t> and <uint32_t, Product*> )
    The remove function can be reused except the argument names are different
    The doubleSize function can be reused except the std::pair types are different ( <std::string, uint32_t> and <uint32_t, Product*> )
    The display function can be reused except the print statement for displaying the lists is slightly different (product->id instead of just product)
