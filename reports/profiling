Do templates or type specific implementations perform better? Write your
hypothesis before running experiments. Why do your results look the way they
do? Consult the internet.

    Templates simply replace the typenames with their times at compile time, so the code will not behave differently.

What types of useful information can you measure with getrusage, with perf?

getrusage:
user time,system time,page faults without IO,context switches voulentary,context switches invoulentary,max set size

perf:
cpu-cycles,instructions,cache-references,cache-misses,branch-instructions,branch-misses,bus-cycles,L1-dcache-loads,L1-dcache-load-misses,L1-dcache-stores,LLC-loads,LLC-load-misses,LLC-stores,LLC-store-misses,dTLB-load-misses,dTLB-store-misses,iTLB-load-misses,branch-loads,branch-load-misses

Which type of hash table is better, chained collisions or open addressing?

open addressing is generally faster but takes up more memory. Specifics are in the report.

Is a hash table even the right data structure at all for Amazoff's use 
case? List some pros and cons.

    Hash tables are easy to manage, read, and write to.
    However, they are volatile and limited in size to memory.
    This means a database may be more applicable.
